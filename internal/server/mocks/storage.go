// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CounterAll mocks base method.
func (m *MockStorage) CounterAll() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CounterAll")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CounterAll indicates an expected call of CounterAll.
func (mr *MockStorageMockRecorder) CounterAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterAll", reflect.TypeOf((*MockStorage)(nil).CounterAll))
}

// CounterGet mocks base method.
func (m *MockStorage) CounterGet(name string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CounterGet", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CounterGet indicates an expected call of CounterGet.
func (mr *MockStorageMockRecorder) CounterGet(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterGet", reflect.TypeOf((*MockStorage)(nil).CounterGet), name)
}

// CounterInc mocks base method.
func (m *MockStorage) CounterInc(name string, val int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CounterInc", name, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// CounterInc indicates an expected call of CounterInc.
func (mr *MockStorageMockRecorder) CounterInc(name, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterInc", reflect.TypeOf((*MockStorage)(nil).CounterInc), name, val)
}

// GaugeAll mocks base method.
func (m *MockStorage) GaugeAll() (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GaugeAll")
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GaugeAll indicates an expected call of GaugeAll.
func (mr *MockStorageMockRecorder) GaugeAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeAll", reflect.TypeOf((*MockStorage)(nil).GaugeAll))
}

// GaugeGet mocks base method.
func (m *MockStorage) GaugeGet(name string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GaugeGet", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GaugeGet indicates an expected call of GaugeGet.
func (mr *MockStorageMockRecorder) GaugeGet(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeGet", reflect.TypeOf((*MockStorage)(nil).GaugeGet), name)
}

// GaugeSet mocks base method.
func (m *MockStorage) GaugeSet(name string, val float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GaugeSet", name, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// GaugeSet indicates an expected call of GaugeSet.
func (mr *MockStorageMockRecorder) GaugeSet(name, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeSet", reflect.TypeOf((*MockStorage)(nil).GaugeSet), name, val)
}
